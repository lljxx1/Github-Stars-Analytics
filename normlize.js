var request = require("request-promise");
var cheerio = require('cheerio');
var Stream = require("stream");
var fs = require('fs');

var DataFile = './database.sqlite';

var Sequelize = require('sequelize');
var sequelize = new Sequelize('mainDB', null, null, {
    dialect: "sqlite",
    storage: DataFile,
});

sequelize
    .authenticate()
    .then(function (err) {
        console.log('Connection has been established successfully.');
    }, function (err) {
        console.log('Unable to connect to the database:', err);
    });




//  MODELS
var User = sequelize.define('User', {
    userId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        _autoGenerated: true
    },
    // userId: Sequelize.INTEGER,
    nickName: Sequelize.STRING,
    user: Sequelize.STRING,
    location: Sequelize.STRING,
    website: Sequelize.STRING,
    status: Sequelize.STRING,
    desc: Sequelize.STRING,
    email: Sequelize.STRING,
    stars: Sequelize.INTEGER,
    followers: Sequelize.INTEGER,
    repos: Sequelize.INTEGER,
    organization: Sequelize.STRING,
    has_location: Sequelize.INTEGER,
    has_organization: Sequelize.INTEGER,
    fetched: Sequelize.INTEGER,
});



async function parseBy(addr){
    var newAddr = addr.split(',');
    var url = 'http://api.map.baidu.com/?qt=s&c=332&wd='+encodeURIComponent(addr)+'&rn=10&ie=utf-8&oue=1&fromproduct=jsapi&res=api&ak=E4805d16520de693a3fe707cdc962045';
    var city = null;
    try{
        var data = await request.get(url);
        var resp = JSON.parse(data);
        if(resp.current_city.code != 332){
            city = resp.current_city;
        }
    }catch(e){}
    return city;
}


var top = {};

var formatter = {

    location(value){
        if(!value) return value;
        value = value.toLowerCase();
        var spliter = value.split(',');
        if(spliter.length == 2){
            spliter.pop();
        }
        var newLocation = spliter[0];
        return newLocation;
    },

    organization(value){
        if(!value) return value;
        return value.toLowerCase().replace('@','').replace(" Inc.", "");
    }
}


;(async () => {

    var users = await User.findAll({
        where: {
            has_location: 1
        }
    });

    for (let index = 0; index < users.length; index++) {
        const user = users[index];
        var neeLa = await parseBy(user.location);
        if(neeLa){
            await user.update({
                location: neeLa.name
            });
            console.log(neeLa.name);
        }
    }
 
    console.log(users.length)
})();